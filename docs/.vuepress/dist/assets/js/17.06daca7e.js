(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{373:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"回流与重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回流与重绘"}},[t._v("#")]),t._v(" 回流与重绘")]),t._v(" "),a("h2",{attrs:{id:"_1-浏览器渲染流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器渲染流程"}},[t._v("#")]),t._v(" 1. 浏览器渲染流程")]),t._v(" "),a("p",[t._v("页面渲染大概流程图：\n"),a("img",{attrs:{src:t.$withBase("/imgs/p2.png"),alt:"mixureSecure"}})]),t._v(" "),a("h4",{attrs:{id:"过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程:")]),t._v(" "),a("ul",[a("li",[t._v("解析HTML，生成DOM树，解析CSS，生成CSSOM树")]),t._v(" "),a("li",[t._v("将DOM树和CSSOM树结合，生成渲染树(Render Tree)")]),t._v(" "),a("li",[t._v("Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）")]),t._v(" "),a("li",[t._v("Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素")]),t._v(" "),a("li",[t._v("Display:将像素发送给GPU，展示在页面上。")])]),t._v(" "),a("h2",{attrs:{id:"_2-回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-回流"}},[t._v("#")]),t._v(" 2.回流")]),t._v(" "),a("p",[t._v("前面我们通过构造渲染树，我们将可见DOM节点以及它对应的样式结合起来，可是我们还需要计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流。")]),t._v(" "),a("h3",{attrs:{id:"触发条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发条件"}},[t._v("#")]),t._v(" 触发条件：")]),t._v(" "),a("ul",[a("li",[t._v("页面初始化 （必定，不可减少的）")]),t._v(" "),a("li",[t._v("添加或者删除可见的DOM元素")]),t._v(" "),a("li",[t._v("Dom元素的几何属性变化")]),t._v(" "),a("li",[t._v("内容改变（文本改变或者图片大小改变而引起的计算值宽度和高度改变）")]),t._v(" "),a("li",[t._v("浏览器窗口尺寸改变")]),t._v(" "),a("li",[t._v("获取某些属性（offsetTop/tLeft/Width/Height、scrollTop/Left/Width/Height、 clientTop/Left/Width/Height、width、height，请求了getComputedStyle(), 或者 IE的 currentStyle也会引起回流。）")]),t._v(" "),a("li",[t._v("修改网页默认字体时")])]),t._v(" "),a("h2",{attrs:{id:"_3-重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-重绘"}},[t._v("#")]),t._v(" 3.重绘")]),t._v(" "),a("p",[t._v("当Render树中的一些元素需要更新，而这些属性只是影响元素的外观、风格，不影响布局，就称为重绘")]),t._v(" "),a("h3",{attrs:{id:"触发条件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发条件-2"}},[t._v("#")]),t._v(" 触发条件")]),t._v(" "),a("ul",[a("li",[t._v("回流的所有条件都能触发重绘")]),t._v(" "),a("li",[t._v("修改元素的背景颜色等")])]),t._v(" "),a("p",[t._v("由上图我们可以知道，回流必定触发重绘，然而重绘不一定触发回流。")]),t._v(" "),a("h2",{attrs:{id:"_4-减少回流与重绘的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-减少回流与重绘的本质"}},[t._v("#")]),t._v(" 4.减少回流与重绘的本质")]),t._v(" "),a("p",[t._v("减少回流、重绘其实就是需要减少对Render树的操作，并减少对一些style信息的请求，尽量利用好浏览器的优化策略")]),t._v(" "),a("h2",{attrs:{id:"_5-减少回流和重绘的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-减少回流和重绘的方式"}},[t._v("#")]),t._v(" 5.减少回流和重绘的方式")]),t._v(" "),a("ol",[a("li",[t._v("在内存中多次操作节点，完成后再添加到文档中去：\n例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行")]),t._v(" "),a("li",[t._v("将那些改变样式的操作集合在一起，直接改变className。如果动态改变样式，则使用cssText")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不好的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 较好的写法")]),t._v("\nel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("left: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("; top: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("top"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("将需要多次重排的元素，脱离文档流\nposition属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。")]),t._v(" "),a("li",[t._v("量不要使用表格布局")]),t._v(" "),a("li",[t._v('让要操作的元素进行"离线处理"，处理完后一起更新')])]),t._v(" "),a("ul",[a("li",[t._v("使用DocumentFragment进行缓存操作，引发一次回流和重绘")]),t._v(" "),a("li",[t._v("使用display：none，只引发两次回流和重绘")]),t._v(" "),a("li",[t._v("使用cloneNode（true or false）和 replaceChild技术，引发一次回流和重绘")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("在需要经常去那些引起浏览器重排的属性值时，要缓存到变量")])]),t._v(" "),a("h4",{attrs:{id:"documentfragment对象-可以减少重绘与回流的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#documentfragment对象-可以减少重绘与回流的问题"}},[t._v("#")]),t._v(" DocumentFragment对象 （可以减少重绘与回流的问题）")]),t._v(" "),a("ul",[a("li",[t._v("一般的动态创建html元素都是创建好了直接appendChild（）上去，但是如果要添加大量的元素用这个方法就会导致大量的重绘以及回流，所以需要一个‘缓存区’来保存创建的节点，于是\nDocumentFragment便派上用场了。")]),t._v(" "),a("li",[t._v("DocumentFragment节点不属于文档树，继承的parnetNode属性总是null。")]),t._v(" "),a("li",[t._v("它有一种特殊的行为，该行为使得它非常有用，即当把DocumentFragment插入文档树时，不是插入自身，而是它的所有子孙。这就让它成为了一个非常有用的占位符。")]),t._v(" "),a("li",[t._v("重点在于DocumentFragment节点不属于文档树。因此把创建的节点添加到该对象时，并不会导致页面的回流，因此性能就上去了\n代码示例如下:")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("fragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDocumentFragment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    fragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"使用clonenode和replacechild技术-减少回流与重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用clonenode和replacechild技术-减少回流与重绘"}},[t._v("#")]),t._v(" 使用cloneNode和replaceChild技术，减少回流与重绘")]),t._v(" "),a("p",[t._v("代码示例如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" oldNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" target "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 深复制")]),t._v("\nclone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对克隆的对象进行操作")]),t._v("\noldNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("repllaceChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"_6-css3硬件加速-gpu加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-css3硬件加速-gpu加速"}},[t._v("#")]),t._v(" 6.css3硬件加速（GPU加速）")]),t._v(" "),a("p",[t._v("比起考虑如何减少回流重绘，我们更期望的是，根本不要回流重绘。这个时候，css3硬件加速就闪亮登场啦！！")]),t._v(" "),a("h4",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用：")]),t._v(" "),a("ul",[a("li",[t._v("transform")]),t._v(" "),a("li",[t._v("opacity")]),t._v(" "),a("li",[t._v("filters")]),t._v(" "),a("li",[t._v("Will-change")])]),t._v(" "),a("h4",{attrs:{id:"重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点"}},[t._v("#")]),t._v(" 重点：")]),t._v(" "),a("ul",[a("li",[t._v("使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘")]),t._v(" "),a("li",[t._v("对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。")])]),t._v(" "),a("h4",{attrs:{id:"gpu加速的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpu加速的原因"}},[t._v("#")]),t._v(" GPU加速的原因:")]),t._v(" "),a("p",[t._v("在合成（gpu加速）的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，即直接交给合成线程处理。交给它处理有两大好处:")]),t._v(" "),a("ul",[a("li",[t._v("能够充分发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU 是擅长处理位图数据的。")]),t._v(" "),a("li",[t._v("没有占用主线程的资源，即使主线程卡住了，效果依然能够流畅地展示。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);